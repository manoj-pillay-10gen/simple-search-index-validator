{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "components/mappings/fields/autocomplete.json",
  "type": "object",
  "properties": {
    "type": {
      "suggestSortText": "0",
      "type": "string",
      "markdownDescription": "### How to Index Fields for Autocompletion\nYou can use the Atlas Search `autocomplete` type to index text values in string fields for autocompletion. You can configure an `autocomplete` type to satisfy a variety of use cases. To learn more about the configuration options available for the `autocomplete` type, such as tokenization strategy and diacritic folding, see [Configure autocomplete Field Properties](https://www.mongodb.com/docs/atlas/atlas-search/field-types/autocomplete-type/#std-label-fts-field-types-autocomplete-options). You can query fields indexed as autocomplete type only using the [autocomplete](https://www.mongodb.com/docs/atlas/atlas-search/autocomplete/#std-label-autocomplete-ref) operator.\n\nYou can also use the `autocomplete` type to index:\n- Fields whose value is an array of strings. To learn more, see [How to Index the Elements of an Array.](https://www.mongodb.com/docs/atlas/atlas-search/field-types/array-type/#std-label-fts-array-ref)\n- String fields inside an array of documents indexed as the [embeddedDocuments](https://www.mongodb.com/docs/atlas/atlas-search/field-types/embedded-documents-type/#std-label-bson-data-types-embedded-documents) type.\n\n\n> ### TIP\n>If you have a large number of documents and a wide range of data against which you want to run Atlas Search queries using the [autocomplete](https://www.mongodb.com/docs/atlas/atlas-search/autocomplete/#std-label-autocomplete-ref) operator, building this index can take some time. Alternatively, you can create a separate index with only the autocomplete type to reduce the impact on other indexes and queries while the index builds. To learn more, see Atlas Search [Index Performance Considerations.](https://www.mongodb.com/docs/atlas/atlas-search/performance/index-performance/#std-label-index-size-and-config)\n\nAtlas Search doesn't [dynamically](https://www.mongodb.com/docs/atlas/atlas-search/define-field-mappings/#std-label-static-dynamic-mappings) index fields of type `autocomplete`. You must use [static mappings](https://www.mongodb.com/docs/atlas/atlas-search/define-field-mappings/#std-label-static-dynamic-mappings) to index `autocomplete` fields.",
      "description": "Specify this data type for fields of type string for auto-completion.",
      "const": "autocomplete"
    },
    "analyzer": {
      "suggestSortText": "1",
      "$ref": "../../common.json#/definitions/autoCompleteAnalyzers",
      "markdownDescription": "Name of the [analyzer](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/#std-label-analyzers-ref) to use with this autocomplete mapping. You can use any Atlas Search analyzer except the `lucene.kuromoji` [language analyzer](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/language/#std-label-ref-language-analyzers) and the following [custom analyzer](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/custom/#std-label-custom-analyzers) tokenizers and token filters:\n\n- [nGram](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/tokenizers/#std-label-ngram-tokenizer-ref) Tokenizer\n- [edgeGram](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/tokenizers/#std-label-edgegram-tokenizer-ref) Tokenizer\n- [daitchMokotoffSoundex](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/token-filters/#std-label-daitchmokotoffsoundex-tf-ref) Token Filter\n- [nGram](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/token-filters/#std-label-ngram-tf-ref) Token Filter\n- [edgeGram](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/token-filters/#std-label-edgegram-tf-ref) Token Filter\n- [shingle](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/token-filters/#std-label-shingle-tf-ref) Token Filter",
      "description": "Name of the analyzer to use with this autocomplete mapping. "
    },
    "minGrams": {
      "suggestSortText": "2",
      "type": "integer",
      "markdownDescription": "Minimum number of characters per indexed sequence. We recommend `4` for the minimum value. A value that is less than `4` could impact performance because the size of the index can become very large. We recommend the default value of `2` for `edgeGram` only.",
      "description": "Specify the minimum number of characters to index per sequence.",
      "default": 2
    },
    "maxGrams": {
      "suggestSortText": "3",
      "type": "integer",
      "markdownDescription": "Maximum number of characters per indexed sequence. The value limits the character length of indexed tokens. When you search for terms longer than the `maxGrams` value, Atlas Search truncates the tokens to the `maxGrams` length.",
      "description": "Specify the maximum number of characters to index per sequence.",
      "default": 15
    },
    "tokenization": {
      "suggestSortText": "4",
      "type": "string",
      "markdownDescription": "### Tokenization strategy to use when indexing the field for autocompletion. \n\nValue can be one of the following:\n- `edgeGram` - create indexable tokens, referred to as grams, from variable-length character sequences starting at the left side of the words as delimited by the analyzer used with this autocomplete mapping.\n- `rightEdgeGram` - create indexable tokens, referred to as grams, from variable-length character sequences starting at the right side of the words as delimited by the analyzer used with this autocomplete mapping.\n- `nGram` - create indexable tokens, referred to as grams, by sliding a variable-length character window over a word. Atlas Search creates more tokens for `nGram` than `edgeGram` or `rightEdgeGram`. Therefore, `nGram` takes more space and time to index the field. `nGram` is better suited for querying languages with long, compound words or languages that don't use spaces.\n\n`edgeGram`, `rightEdgeGram`, and `nGram` are applied at the letter-level.",
      "description": "Specify the tokenization strategy to use when indexing the field for autocompletion",
      "enum": [
        "edgeGram",
        "rightEdgeGram",
        "nGram"
      ],
      "default": "edgeGram"
    },
    "foldDiacritics": {
      "suggestSortText": "5",
      "type": "boolean",
      "markdownDescription": "### Flag that indicates whether to include or remove diacritics from the indexed text. \nValue can be one of the following:\n\n- `true` - ignore diacritic marks in the index and query text. Returns results with and without diacritic marks. For example, a search for `cafè` returns results with the characters `cafè` and `cafe`.\n- `false` - include diacritic marks in the index and query text. Returns only results that match the strings with or without diacritics in the query. For example, a search for `cafè` returns results only with the characters `cafè`. A search for `cafe` returns results only with the characters `cafe`.",
      "description": "Specify whether to include or remove diacritics from the indexed text.",
      "default": true
    }
  },
  "required": ["type"],
  "additionalProperties": false
}